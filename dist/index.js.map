{"version":3,"file":"index.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACA;AACA,mCAAmC,OAAO,YAAY,EAAE,YAAY,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,CAAC;AACD;AACA,iEAAe,eAAe;;;;;;;;;;;;;;;;;;;AC5ES;AACN;AACE;AACS;AAC5C;AACA;AACA,oBAAoB,+CAAM;AAC1B,wBAAwB,+CAAM;AAC9B;AACA,yBAAyB,qDAAS;AAClC,uBAAuB,qDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAA0B;AAClC,YAAY,iEAAsB;AAClC;AACA;AACA;AACA,QAAQ,uDAA0B;AAClC,YAAY,gEAAqB;AACjC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAsC;AAC9C;AACA;AACA,QAAQ,8EAAmC;AAC3C,QAAQ,gFAAqC;AAC7C;AACA;AACA;AACA,SAAS;AACT,QAAQ,mFAAwC;AAChD;AACA,YAAY,wDAA2B,CAAC,4DAAiB;AACzD,SAAS;AACT,QAAQ,qFAA0C;AAClD;AACA,YAAY,wDAA2B,CAAC,4DAAiB;AACzD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAA4B;AAC5C;AACA,oBAAoB,kEAAuB;AAC3C;AACA,gBAAgB,wDAA2B;AAC3C;AACA,oBAAoB,4DAAiB;AACrC;AACA,cAAc;AACd;AACA;AACA,gBAAgB,yDAA4B,UAAU,mEAAwB;AAC9E,gBAAgB,wDAA2B;AAC3C;AACA,oBAAoB,4DAAiB;AACrC;AACA;AACA;AACA,YAAY,oFAAyC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAA4B,UAAU,mEAAwB;AACtE,QAAQ,yDAA4B,cAAc,kEAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;;;;;;ACzHyB;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sDAAgB;AACzE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChGgE;AACzD;AACP;AACA;AACA,gBAAgB,qDAAW,CAAC,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qDAAW,CAAC,+CAAS;AAC3D;AACA;AACA,uBAAuB,sDAAY;AACnC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjC0B;AACnB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,sCAAsC,kDAAI;AAC1C;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;ACzBgC;AACvC;AACA;AACA;AACA,mBAAmB,iDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI;;;;;;;UCpCnB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0B;AACc;AACxC,aAAa,yDAAW;AACxB;AACA","sources":["webpack://webpacksetup/./src/scss/index.scss","webpack://webpacksetup/./src/js/code/DOM-elements.js","webpack://webpacksetup/./src/js/code/DOM.js","webpack://webpacksetup/./src/js/code/Game.js","webpack://webpacksetup/./src/js/code/Gameboard.js","webpack://webpacksetup/./src/js/code/Player.js","webpack://webpacksetup/./src/js/code/helpers.js","webpack://webpacksetup/./src/js/code/ships.js","webpack://webpacksetup/webpack/bootstrap","webpack://webpacksetup/webpack/runtime/define property getters","webpack://webpacksetup/webpack/runtime/hasOwnProperty shorthand","webpack://webpacksetup/webpack/runtime/make namespace object","webpack://webpacksetup/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export const DOMelements = {\r\n    playerGrid: document.querySelector('.player__grid'),\r\n    enemyGrid: document.querySelector('.enemy__grid'),\r\n    btnNew: document.getElementById('btn__new-game__header'),\r\n    btnReset: document.getElementById('btn__reset-game__header'),\r\n    playerPoints: document.getElementById('player__points'),\r\n    enemyPoints: document.getElementById('enemy__points'),\r\n\r\n    modal: document.querySelector('.modal'),\r\n    btnNewModal: document.getElementById('btn__new-game__modal'),\r\n    btnResetModal: document.getElementById('btn__reset-game__modal'),\r\n\r\n    modalTitle: document.querySelector('.modal__title'),\r\n}\r\n","const renderGameboard = (() => {\r\n    const renderCell = (x, y, status) => {\r\n        return `<div class=\"cell ${status}\" data-x=\"${x}\" data-y=\"${y}\"></div>`\r\n    }\r\n\r\n    const resetGrid = (container) => {\r\n        container.textContent = ''\r\n    }\r\n\r\n    const renderPoints = (player, playerDOMElement) => {\r\n        if (player.getType() === 'human') {\r\n            playerDOMElement.textContent = player.getPoints()\r\n        } else if (player.getType() === 'cpu') {\r\n            playerDOMElement.textContent = player.getPoints()\r\n        }\r\n    }\r\n\r\n    const toggleModal = (modal) => {\r\n        if (modal.getAttribute('data-open') === 'false') {\r\n            console.log('test')\r\n            modal.setAttribute('data-open', true)\r\n        } else {\r\n            modal.setAttribute('data-open', false)\r\n        }\r\n    }\r\n\r\n    const renderModal = (winner, modal) => {\r\n        modal.querySelector('.modal__title').textContent = winner\r\n        toggleModal(modal)\r\n    }\r\n\r\n    const renderGrid = (container, gameboard, type) => {\r\n        resetGrid(container)\r\n        const board = gameboard.getBoard()\r\n        const length = board.length\r\n\r\n        let grid = ''\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            for (let j = 0; j < length; j++) {\r\n                let status = board[i][j]\r\n\r\n                if (status === 'hit') {\r\n                    if (type === 'human') {\r\n                        status = 'player__hit'\r\n                    } else {\r\n                        status = 'enemy__hit'\r\n                    }\r\n                } else if (status === 'miss') {\r\n                    if (type === 'human') {\r\n                        status = 'player__miss'\r\n                    } else {\r\n                        status = 'enemy__miss'\r\n                    }\r\n                }\r\n\r\n                if (status === null) {\r\n                    status = ''\r\n                } else if (status.ship) {\r\n                    if (type === 'human') {\r\n                        status = 'player__ship'\r\n                    } else {\r\n                        status = ''\r\n                    }\r\n                }\r\n\r\n                grid += renderCell(i, j, status)\r\n            }\r\n        }\r\n\r\n        container.innerHTML = grid\r\n    }\r\n\r\n    return { renderGrid, renderPoints, renderModal, toggleModal }\r\n})()\r\n\r\nexport default renderGameboard\r\n","import { GameBoard } from './Gameboard'\r\nimport { Player } from './Player'\r\nimport renderGameboard from './DOM'\r\nimport { DOMelements } from './DOM-elements'\r\n\r\nconst GameHandler = () => {\r\n    const player1 = Player('human')\r\n    const EnemyPlayer = Player('cpu')\r\n\r\n    const player1Board = GameBoard()\r\n    const enemyBoard = GameBoard()\r\n\r\n    const gameInit = () => {\r\n        startGame()\r\n        addEventsToBtn()\r\n    }\r\n\r\n    const resetGame = () => {\r\n        player1.resetFleet()\r\n        EnemyPlayer.resetFleet()\r\n        player1Board.resetGameboard()\r\n        enemyBoard.resetGameboard()\r\n    }\r\n\r\n    const renderGrids = () => {\r\n        renderGameboard.renderGrid(\r\n            DOMelements.playerGrid,\r\n            player1Board,\r\n            player1.getType()\r\n        )\r\n        renderGameboard.renderGrid(\r\n            DOMelements.enemyGrid,\r\n            enemyBoard,\r\n            EnemyPlayer.getType()\r\n        )\r\n    }\r\n    const addEventsToGrid = () => {\r\n        DOMelements.enemyGrid.addEventListener('click', attackPlayer)\r\n    }\r\n    const addEventsToBtn = () => {\r\n        DOMelements.btnNew.addEventListener('click', startGame)\r\n        DOMelements.btnReset.addEventListener('click', () => {\r\n            startGame()\r\n            player1.resetPoints()\r\n            EnemyPlayer.resetPoints()\r\n        })\r\n        DOMelements.btnNewModal.addEventListener('click', () => {\r\n            startGame()\r\n            renderGameboard.toggleModal(DOMelements.modal)\r\n        })\r\n        DOMelements.btnResetModal.addEventListener('click', () => {\r\n            resetGame()\r\n            renderGameboard.toggleModal(DOMelements.modal)\r\n        })\r\n    }\r\n\r\n    const attackPlayer = (e) => {\r\n        const cell = e.target\r\n        const x = cell.dataset.x\r\n        const y = cell.dataset.y\r\n        const board = enemyBoard.getBoard()[x][y]\r\n        if (board !== 'hit' && board !== 'miss') {\r\n            player1.attack(x, y, enemyBoard)\r\n            EnemyPlayer.autoAttack(player1Board)\r\n\r\n            renderGrids()\r\n        }\r\n        if (player1Board.checkShipsSunk() || enemyBoard.checkShipsSunk()) {\r\n            if (player1Board.checkShipsSunk()) {\r\n                console.log('CPU Winns')\r\n                EnemyPlayer.addPoints()\r\n                renderGameboard.renderPoints(\r\n                    EnemyPlayer,\r\n                    DOMelements.enemyPoints\r\n                )\r\n                renderGameboard.renderModal(\r\n                    'The Enemy wins the Game',\r\n                    DOMelements.modal\r\n                )\r\n            } else if (enemyBoard.checkShipsSunk()) {\r\n                console.log('player winns')\r\n                player1.addPoints()\r\n                renderGameboard.renderPoints(player1, DOMelements.playerPoints)\r\n                renderGameboard.renderModal(\r\n                    'Player wins the Game',\r\n                    DOMelements.modal\r\n                )\r\n            }\r\n\r\n            DOMelements.enemyGrid.removeEventListener('click', attackPlayer)\r\n        }\r\n\r\n        //console.log(player1.attack(x, y, enemyBoard))\r\n    }\r\n\r\n    const autoPlace = () => {\r\n        player1Board.resetGameboard()\r\n        enemyBoard.resetGameboard()\r\n\r\n        player1Board.autoPlaceAllShips(player1.getFleet())\r\n        enemyBoard.autoPlaceAllShips(EnemyPlayer.getFleet())\r\n    }\r\n\r\n    const startGame = () => {\r\n        resetGame()\r\n        addEventsToGrid()\r\n        autoPlace()\r\n        renderGrids()\r\n        renderGameboard.renderPoints(player1, DOMelements.playerPoints)\r\n        renderGameboard.renderPoints(EnemyPlayer, DOMelements.enemyPoints)\r\n    }\r\n\r\n    return {\r\n        gameInit,\r\n        startGame,\r\n        autoPlace,\r\n        renderGrids,\r\n        resetGame,\r\n    }\r\n}\r\n\r\nexport default GameHandler\r\n","import { randomCoords, SHIP_TYPE } from './helpers'\r\nexport const GameBoard = () => {\r\n    let gameboard = Array(10)\r\n        .fill(null)\r\n        .map(() => Array(10).fill(null))\r\n\r\n    let placedShip = []\r\n    const getBoard = () => gameboard\r\n    const checkPlacedShips = () => placedShip.length === SHIP_TYPE.length\r\n\r\n    const recieveAttack = (x, y) => {\r\n        if (gameboard[x][y] === null) {\r\n            gameboard[x][y] = 'miss'\r\n        } else if (gameboard[x][y].ship) {\r\n            gameboard[x][y].ship.hit(gameboard[x][y].index)\r\n            gameboard[x][y] = 'hit'\r\n        }\r\n\r\n        return gameboard[x][y]\r\n    }\r\n    const coordAdjust = (x0, y0, i, position) => {\r\n        let x = x0\r\n        let y = y0 + i\r\n\r\n        if (position === 'vertical') {\r\n            x = x0 + i\r\n            y = y0\r\n        }\r\n\r\n        return [x, y]\r\n    }\r\n    const checkPos = (length, x0, y0, position) => {\r\n        const list = []\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            const [x, y] = coordAdjust(x0, y0, i, position)\r\n\r\n            if (y < 10 && x < 10) {\r\n                list.push(gameboard[x][y])\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return list.every((cell) => cell === null)\r\n    }\r\n\r\n    const placeShip = (ship, x0, y0) => {\r\n        //console.log(ship)\r\n        const position = ship.getPosition()\r\n        const validPos = checkPos(ship.length, x0, y0, position)\r\n\r\n        if (validPos) {\r\n            for (let i = 0; i < ship.length; i++) {\r\n                const [x, y] = coordAdjust(x0, y0, i, position)\r\n\r\n                gameboard[x][y] = { ship, index: i }\r\n            }\r\n            placedShip.push(ship)\r\n            return validPos\r\n        } else {\r\n            return validPos\r\n        }\r\n    }\r\n\r\n    const placeShipAutomatic = (ship) => {\r\n        const [x, y] = randomCoords()\r\n        const randomDirection = Math.random() > 0.5\r\n\r\n        if (randomDirection) ship.changePosition()\r\n        const shipPlace = placeShip(ship, x, y)\r\n        if (!shipPlace) placeShipAutomatic(ship)\r\n    }\r\n    const autoPlaceAllShips = (ships) => {\r\n        for (const ship in ships) {\r\n            placeShipAutomatic(ships[ship])\r\n        }\r\n    }\r\n    const checkShipsSunk = () => placedShip.every((ship) => ship.isSunk())\r\n\r\n    const resetGameboard = () => {\r\n        gameboard = Array(10)\r\n            .fill(null)\r\n            .map(() => Array(10).fill(null))\r\n        placedShip = []\r\n    }\r\n\r\n    return {\r\n        getBoard,\r\n        recieveAttack,\r\n        placeShip,\r\n        checkPlacedShips,\r\n        resetGameboard,\r\n        autoPlaceAllShips,\r\n        checkShipsSunk,\r\n    }\r\n}\r\n","import { createFleet, randomCoords, SHIP_TYPE } from './helpers'\r\nexport const Player = (type) => {\r\n    const playerType = type\r\n    let playerPoints = 0\r\n    let fleet = createFleet(SHIP_TYPE)\r\n\r\n    const getType = () => playerType\r\n    const resetPoints = () => (playerPoints = 0)\r\n    const getPoints = () => playerPoints\r\n    const addPoints = () => playerPoints++\r\n    const getFleet = () => fleet\r\n    const resetFleet = () => (fleet = createFleet(SHIP_TYPE))\r\n    const attack = (x, y, enemyBoard) => enemyBoard.recieveAttack(x, y)\r\n    const autoAttack = (enemyBoard) => {\r\n        const [x, y] = randomCoords()\r\n        const pos = enemyBoard.getBoard()[x][y]\r\n        if (pos === 'miss' || pos === 'hit') {\r\n            autoAttack(enemyBoard)\r\n        } else {\r\n            enemyBoard.recieveAttack(x, y)\r\n        }\r\n    }\r\n\r\n    return {\r\n        getType,\r\n        getFleet,\r\n        resetFleet,\r\n        attack,\r\n        autoAttack,\r\n        getPoints,\r\n        addPoints,\r\n        resetPoints,\r\n    }\r\n}\r\n","import Ship from './ships'\r\nexport const SHIP_TYPE = [\r\n    'Carrier',\r\n    'Battleship',\r\n    'Cruiser',\r\n    'Submarine',\r\n    'Destroyer',\r\n]\r\n\r\nexport const SHIP_LENGTH = {\r\n    Carrier: 5,\r\n    Battleship: 4,\r\n    Cruiser: 3,\r\n    Submarine: 3,\r\n    Destroyer: 2,\r\n}\r\n\r\nexport function createFleet(type) {\r\n    const fleet = {}\r\n\r\n    type.forEach((el) => (fleet[el] = Ship(el)))\r\n\r\n    return fleet\r\n}\r\nconst random = (size = 10) => Math.floor(Math.random() * size)\r\nexport const randomCoords = (size = 10) => [random(size), random(size)]\r\n","import { SHIP_LENGTH } from './helpers'\r\n\r\nconst Ship = (type) => {\r\n    const id = type\r\n    const length = SHIP_LENGTH[type]\r\n    const hits = Array(length).fill(null)\r\n    let position = 'horizontal'\r\n\r\n    const getHit = () => hits\r\n    const getPosition = () => {\r\n        return position\r\n    }\r\n    const changePosition = () => {\r\n        position === 'horizontal'\r\n            ? (position = 'vertical')\r\n            : (position = 'horizontal')\r\n    }\r\n    const hit = (index) => {\r\n        hits[index] = true\r\n    }\r\n    const isSunk = () => {\r\n        return hits.every((el) => el === true)\r\n    }\r\n\r\n    return {\r\n        length,\r\n        id,\r\n        hits,\r\n        getHit,\r\n        hit,\r\n        isSunk,\r\n        getPosition,\r\n        changePosition,\r\n    }\r\n}\r\n\r\nexport default Ship\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './scss/index.scss'\r\nimport GameHandler from './js/code/Game'\r\nconst game = GameHandler()\r\n\r\nwindow.addEventListener('DOMContentLoaded', game.gameInit)\r\n"],"names":[],"sourceRoot":""}